/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new post
         * @description Creates a new post for a brand, including generated copy, media, and scheduling details.
         */
        post: operations["createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/brands/{brandId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a brand by brandId */
        get: operations["getBrandById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PostPlanDocument: components["schemas"]["BaseModel"] & {
            brandId?: string;
            postPlan?: components["schemas"]["PostPlan"];
            /**
             * Format: date-time
             * @description Timestamp of the last execution of this post plan
             */
            lastExecutedAt?: string;
            /** @enum {string} */
            status?: "draft" | "active" | "paused" | "completed";
            executionHistory?: {
                /** Format: date-time */
                executedAt?: string;
                /** @enum {string} */
                status?: "success" | "failure" | "pending";
                /** @description Additional details about the execution */
                details?: string;
            }[];
        };
        PostDocument: components["schemas"]["BaseModel"] & {
            brandId?: string;
            postCopy?: components["schemas"]["postCopy"];
            /** @enum {string} */
            status?: "draft" | "scheduled" | "posted" | "failed";
        };
        BrandDocument: components["schemas"]["BaseModel"] & {
            userId?: string;
            brandInfo?: components["schemas"]["BrandInfo"];
            socialAccounts?: components["schemas"]["SocialAccountEntry"][];
        };
        SocialAccountEntry: {
            platform?: components["schemas"]["Platform"];
            account?: components["schemas"]["SocialAccount"];
        };
        SocialAccount: {
            /** @description Unique identifier for the account on the platform (e.g., userId, pageId, open_id) */
            platformAccountId: string;
            /** @description Public-facing handle (e.g., @username) */
            handle?: string;
            /** @description Username or login/display name for the account */
            username?: string;
            /** @description URL to the user's or page's profile */
            profileUrl?: string;
            /** @description OAuth access token for API access */
            accessToken: string;
            /**
             * Format: date-time
             * @description Token expiration timestamp
             */
            expiryDate?: string;
            /** @description Platform-specific additional fields (e.g., pageId for Facebook, refreshToken for TikTok) */
            extra?: {
                [key: string]: unknown;
            };
        };
        /** @enum {string} */
        Platform: "instagram" | "facebook" | "x" | "youtube" | "tiktok";
        PostPlan: {
            info?: {
                name?: string;
                /** @description A detailed description to inform the AI agent about the post plan to assist in content generation. */
                description?: string;
                /** @enum {string} */
                type?: "image" | "multi-image" | "video";
                socialAccounts?: components["schemas"]["Platform"][];
            };
            schedule?: {
                /** @enum {string} */
                frequency?: "multiple_per_day" | "daily" | "alternate_days" | "bi_weekly" | "weekly" | "monthly";
                /** Format: date */
                startDate?: string;
                /** Format: date */
                endDate?: string;
            };
            content?: {
                topics?: string[];
                hashtags?: string[];
                callToAction?: string;
            };
            media?: {
                /** @enum {string} */
                source?: "selected" | "uploaded" | "online" | "ai_generated";
                mediaRefs?: string[];
                /** @description The structure or layout of the media content */
                mediaStructure?: string;
            };
        };
        postCopy: {
            /** @description The content of the post. */
            content?: string;
            /** @description A comment on the post. */
            comment?: string;
            /** @description A list of hashtags associated with the post. */
            hashtags?: string[];
        };
        BrandStyle: {
            colors?: {
                /** @description Primary brand color in hex format */
                primary?: string;
                /** @description Secondary brand color in hex format */
                secondary?: string;
                /** @description Accent brand color in hex format */
                accent1?: string;
                /** @description Additional accent brand color in hex format */
                accent2?: string;
                /** @description Another accent brand color in hex format */
                accent3?: string;
                /** @description Yet another accent brand color in hex format */
                accent4?: string;
                /** @description Final accent brand color in hex format */
                accent5?: string;
                /** @description Text color to use on primary background */
                textOnPrimary?: string;
                /** @description Text color to use on secondary background */
                textOnSecondary?: string;
            };
            fonts?: {
                /** @description Font family for body text */
                body?: string;
                /** @description Font family for headings */
                heading?: string;
            };
            /** @description URL or path to the brand logo image */
            logo?: string;
        };
        BrandInfo: {
            name?: string;
            /** @description A brief description to inform the AI agent about the brand to assist in content generation. */
            description?: string;
            style?: components["schemas"]["BrandStyle"];
        };
        Metadata: {
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdDate: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedDate: string;
            /** @description Whether the record is active or soft-deleted */
            isActive: boolean;
        };
        /** @description Standard error response object */
        Error: {
            /** @description Error code identifier */
            code: string;
            /** @description Human-readable error message */
            message: string;
            /** @description Optional additional error details */
            details?: string | null;
        };
        BaseModel: {
            /** @description unique identifier for the record */
            id: string;
            metadata: components["schemas"]["Metadata"];
        };
        postResponse: {
            /** @description Unique identifier for the post. */
            id: string;
            brandId: string;
            postCopy: components["schemas"]["postCopy"];
            /** @enum {string} */
            status?: "draft" | "scheduled" | "posted" | "failed";
        };
        postRequest: {
            /** @description The brand this post belongs to. */
            brandId: string;
            postCopy: components["schemas"]["postCopy"];
        };
        ContentOrchestratorRequest: {
            /** @description The brand partition key in CosmosDB. */
            brandId: string;
            /** @description The postPlan id in CosmosDB. */
            postPlanId: string;
        };
        /** @description Response containing the brand details. */
        GetBrandByIdResponse: {
            brand: components["schemas"]["BrandDocument"];
        };
        /** @description Request to get a brand by brandId. */
        GetBrandByIdRequest: {
            /** @description Unique identifier for the brand. */
            brandId: string;
        };
    };
    responses: {
        /** @description Authentication required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "UNAUTHORIZED",
                 *       "message": "Valid API key required"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate limit exceeded */
        RateLimitExceeded: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "RATE_LIMIT_EXCEEDED",
                 *       "message": "Rate limit exceeded"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "RESOURCE_NOT_FOUND",
                 *       "message": "The requested resource was not found"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Invalid request parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "INVALID_INPUT",
                 *       "message": "Invalid request parameters"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Pagination and sorting options */
        pagination: {
            /** @default 20 */
            limit?: number;
            /** @default 0 */
            offset?: number;
            /**
             * @default createdAt
             * @enum {string}
             */
            sortBy?: "createdAt" | "updatedAt" | "name";
            /**
             * @default desc
             * @enum {string}
             */
            sortOrder?: "asc" | "desc";
        };
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postRequest"];
            };
        };
        responses: {
            /** @description Post created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["postResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    getBrandById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the brand. */
                brandId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Brand found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBrandByIdResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
}
